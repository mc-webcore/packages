<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.DataProtection.Extensions</name>
    </assembly>
    <members>
        <member name="M:Microsoft.AspNetCore.DataProtection.BitHelpers.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads an unsigned 64-bit integer from <paramref name="buffer"/>
            starting at offset <paramref name="offset"/>. Data is read big-endian.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.BitHelpers.WriteUInt64(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Writes an unsigned 64-bit integer to <paramref name="buffer"/> starting at
            offset <paramref name="offset"/>. Data is written big-endian.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions">
            <summary>
            Helpful extension methods for data protection APIs.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.Byte[],System.TimeSpan)">
            <summary>
            Cryptographically protects a piece of plaintext data, expiring the data after
            the specified amount of time has elapsed.
            </summary>
            <param name="protector">The protector to use.</param>
            <param name="plaintext">The plaintext data to protect.</param>
            <param name="lifetime">The amount of time after which the payload should no longer be unprotectable.</param>
            <returns>The protected form of the plaintext data.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset)">
            <summary>
            Cryptographically protects a piece of plaintext data, expiring the data at
            the chosen time.
            </summary>
            <param name="protector">The protector to use.</param>
            <param name="plaintext">The plaintext data to protect.</param>
            <param name="expiration">The time when this payload should expire.</param>
            <returns>The protected form of the plaintext data.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Protect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.TimeSpan)">
            <summary>
            Cryptographically protects a piece of plaintext data, expiring the data after
            the specified amount of time has elapsed.
            </summary>
            <param name="protector">The protector to use.</param>
            <param name="plaintext">The plaintext data to protect.</param>
            <param name="lifetime">The amount of time after which the payload should no longer be unprotectable.</param>
            <returns>The protected form of the plaintext data.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.ToTimeLimitedDataProtector(Microsoft.AspNetCore.DataProtection.IDataProtector)">
            <summary>
            Converts an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/> into an <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/>
            so that payloads can be protected with a finite lifetime.
            </summary>
            <param name="protector">The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/> to convert to a time-limited protector.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionAdvancedExtensions.Unprotect(Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector,System.String,System.DateTimeOffset@)">
            <summary>
            Cryptographically unprotects a piece of protected data.
            </summary>
            <param name="protector">The protector to use.</param>
            <param name="protectedData">The protected data to unprotect.</param>
            <param name="expiration">An 'out' parameter which upon a successful unprotect
            operation receives the expiration date of the payload.</param>
            <returns>The plaintext form of the protected data.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            Thrown if <paramref name="protectedData"/> is invalid, malformed, or expired.
            </exception>
        </member>
        <member name="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider">
            <summary>
            Contains factory methods for creating an <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider"/> where keys are stored
            at a particular location on the file system.
            </summary>
            <remarks>Use these methods when not using dependency injection to provide the service to the application.</remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> that store keys in a location based on
            the platform and operating system.
            </summary>
            <param name="applicationName">An identifier that uniquely discriminates this application from all other
            applications on the machine.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> given a location at which to store keys.
            </summary>
            <param name="keyDirectory">The <see cref="T:System.IO.DirectoryInfo"/> in which keys should be stored. This may
            represent a directory on a local disk or a UNC share.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder})">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> given a location at which to store keys and an
            optional configuration callback.
            </summary>
            <param name="keyDirectory">The <see cref="T:System.IO.DirectoryInfo"/> in which keys should be stored. This may
            represent a directory on a local disk or a UNC share.</param>
            <param name="setupAction">An optional callback which provides further configuration of the data protection
            system. See <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder"/> for more information.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> that store keys in a location based on
            the platform and operating system and uses the given <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to encrypt the keys.
            </summary>
            <param name="applicationName">An identifier that uniquely discriminates this application from all other
            applications on the machine.</param>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to be used for encryption.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> given a location at which to store keys
            and a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> used to encrypt the keys.
            </summary>
            <param name="keyDirectory">The <see cref="T:System.IO.DirectoryInfo"/> in which keys should be stored. This may
            represent a directory on a local disk or a UNC share.</param>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to be used for encryption.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder},System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider"/> given a location at which to store keys, an
            optional configuration callback and a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> used to encrypt the keys.
            </summary>
            <param name="keyDirectory">The <see cref="T:System.IO.DirectoryInfo"/> in which keys should be stored. This may
            represent a directory on a local disk or a UNC share.</param>
            <param name="setupAction">An optional callback which provides further configuration of the data protection
            system. See <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder"/> for more information.</param>
            <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to be used for encryption.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector">
            <summary>
            An interface that can provide data protection services where payloads have
            a finite lifetime.
            </summary>
            <remarks>
            It is intended that payload lifetimes be somewhat short. Payloads protected
            via this mechanism are not intended for long-term persistence (e.g., longer
            than a few weeks).
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector.CreateProtector(System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/> given a purpose.
            </summary>
            <param name="purpose">
            The purpose to be assigned to the newly-created <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/>.
            </param>
            <returns>An <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/> tied to the provided purpose.</returns>
            <remarks>
            The <paramref name="purpose"/> parameter must be unique for the intended use case; two
            different <see cref="T:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector"/> instances created with two different <paramref name="purpose"/>
            values will not be able to decipher each other's payloads. The <paramref name="purpose"/> parameter
            value is not intended to be kept secret.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector.Protect(System.Byte[],System.DateTimeOffset)">
            <summary>
            Cryptographically protects a piece of plaintext data, expiring the data at
            the chosen time.
            </summary>
            <param name="plaintext">The plaintext data to protect.</param>
            <param name="expiration">The time when this payload should expire.</param>
            <returns>The protected form of the plaintext data.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.ITimeLimitedDataProtector.Unprotect(System.Byte[],System.DateTimeOffset@)">
            <summary>
            Cryptographically unprotects a piece of protected data.
            </summary>
            <param name="protectedData">The protected data to unprotect.</param>
            <param name="expiration">An 'out' parameter which upon a successful unprotect
            operation receives the expiration date of the payload.</param>
            <returns>The plaintext form of the protected data.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            Thrown if <paramref name="protectedData"/> is invalid, malformed, or expired.
            </exception>
        </member>
        <member name="T:Microsoft.AspNetCore.DataProtection.TimeLimitedDataProtector">
            <summary>
            Wraps an existing <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector"/> and appends a purpose that allows
            protecting data with a finite lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.ExceptionExtensions.RequiresHomogenization(System.Exception)">
            <summary>
            Determines whether an exception must be homogenized by being wrapped inside a
            CryptographicException before being rethrown.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.DataProtection.Extensions.Resources.CryptCommon_GenericError">
            <summary>An error occurred during a cryptographic operation.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.DataProtection.Extensions.Resources.TimeLimitedDataProtector_PayloadExpired">
            <summary>The payload expired at {0}.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.DataProtection.Extensions.Resources.FormatTimeLimitedDataProtector_PayloadExpired(System.Object)">
            <summary>The payload expired at {0}.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.DataProtection.Extensions.Resources.TimeLimitedDataProtector_PayloadInvalid">
            <summary>The payload is invalid.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
